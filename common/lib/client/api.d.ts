/**
 * Theia.cloud API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * A request to launch a new session.
 * @export
 * @interface LaunchRequest
 */
export interface LaunchRequest {
    /**
     * The App Id of this Theia.cloud instance. Request without a matching Id will be denied.
     * @type {string}
     * @memberof LaunchRequest
     */
    'appId': string;
    /**
     * The user identification, usually the email address.
     * @type {string}
     * @memberof LaunchRequest
     */
    'user': string;
    /**
     * The app to launch. Needs to be set if a new or ephemeral session should be launched. For an existing workspace the last app definition will be used if none is given.
     * @type {string}
     * @memberof LaunchRequest
     */
    'appDefinition'?: string;
    /**
     * The name of the workspace to mount/create. Needs to be set if an existing workspace should be launched.
     * @type {string}
     * @memberof LaunchRequest
     */
    'workspaceName'?: string;
    /**
     * The label of the workspace to mount/create. If no label is given, a default label will be generated.
     * @type {string}
     * @memberof LaunchRequest
     */
    'label'?: string;
    /**
     * If true no workspace will be created for the session.
     * @type {boolean}
     * @memberof LaunchRequest
     */
    'ephemeral'?: boolean;
    /**
     * Number of minutes to wait for session launch. Default is 3 Minutes.
     * @type {number}
     * @memberof LaunchRequest
     */
    'timeout'?: number;
}
/**
 * Request to ping the availability of the service.
 * @export
 * @interface PingRequest
 */
export interface PingRequest {
    /**
     * The App Id of this Theia.cloud instance. Request without a matching Id will be denied.
     * @type {string}
     * @memberof PingRequest
     */
    'appId': string;
}
/**
 * A request to report activity for a running session.
 * @export
 * @interface SessionActivityRequest
 */
export interface SessionActivityRequest {
    /**
     * The App Id of this Theia.cloud instance. Request without a matching Id will be denied.
     * @type {string}
     * @memberof SessionActivityRequest
     */
    'appId': string;
    /**
     * The name of the session for which activity is reported.
     * @type {string}
     * @memberof SessionActivityRequest
     */
    'sessionName': string;
}
/**
 * A request to list the sessions of a user.
 * @export
 * @interface SessionListRequest
 */
export interface SessionListRequest {
    /**
     * The App Id of this Theia.cloud instance. Request without a matching Id will be denied.
     * @type {string}
     * @memberof SessionListRequest
     */
    'appId': string;
    /**
     * The user identification, usually the email address.
     * @type {string}
     * @memberof SessionListRequest
     */
    'user': string;
}
/**
 *
 * @export
 * @interface SessionSpec
 */
export interface SessionSpec {
    /**
     *
     * @type {string}
     * @memberof SessionSpec
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof SessionSpec
     */
    'appDefinition'?: string;
    /**
     *
     * @type {string}
     * @memberof SessionSpec
     */
    'user'?: string;
    /**
     *
     * @type {string}
     * @memberof SessionSpec
     */
    'url'?: string;
    /**
     *
     * @type {string}
     * @memberof SessionSpec
     */
    'error'?: string;
    /**
     *
     * @type {string}
     * @memberof SessionSpec
     */
    'workspace'?: string;
    /**
     *
     * @type {number}
     * @memberof SessionSpec
     */
    'lastActivity'?: number;
}
/**
 * A request to start a session
 * @export
 * @interface SessionStartRequest
 */
export interface SessionStartRequest {
    /**
     * The App Id of this Theia.cloud instance. Request without a matching Id will be denied.
     * @type {string}
     * @memberof SessionStartRequest
     */
    'appId': string;
    /**
     * The user identification, usually the email address.
     * @type {string}
     * @memberof SessionStartRequest
     */
    'user': string;
    /**
     * The app to launch.
     * @type {string}
     * @memberof SessionStartRequest
     */
    'appDefinition': string;
    /**
     * The name of the workspace to mount/create.
     * @type {string}
     * @memberof SessionStartRequest
     */
    'workspaceName'?: string;
    /**
     * Number of minutes to wait for session launch. Default is 3 Minutes.
     * @type {number}
     * @memberof SessionStartRequest
     */
    'timeout'?: number;
}
/**
 * A request to stop a session
 * @export
 * @interface SessionStopRequest
 */
export interface SessionStopRequest {
    /**
     * The App Id of this Theia.cloud instance. Request without a matching Id will be denied.
     * @type {string}
     * @memberof SessionStopRequest
     */
    'appId': string;
    /**
     * The user identification, usually the email address.
     * @type {string}
     * @memberof SessionStopRequest
     */
    'user': string;
    /**
     * The name of the session to stop.
     * @type {string}
     * @memberof SessionStopRequest
     */
    'sessionName': string;
}
/**
 * Description of a user workspace
 * @export
 * @interface UserWorkspace
 */
export interface UserWorkspace {
    /**
     * The name of the workspace
     * @type {string}
     * @memberof UserWorkspace
     */
    'name': string;
    /**
     * The label of the workspace
     * @type {string}
     * @memberof UserWorkspace
     */
    'label': string;
    /**
     * The app this workspace was used with.
     * @type {string}
     * @memberof UserWorkspace
     */
    'appDefinition'?: string;
    /**
     * The user identification, usually the email address.
     * @type {string}
     * @memberof UserWorkspace
     */
    'user': string;
    /**
     * Whether the workspace is in use at the moment.
     * @type {boolean}
     * @memberof UserWorkspace
     */
    'active': boolean;
}
/**
 * Request to create a new workspace.
 * @export
 * @interface WorkspaceCreationRequest
 */
export interface WorkspaceCreationRequest {
    /**
     * The App Id of this Theia.cloud instance. Request without a matching Id will be denied.
     * @type {string}
     * @memberof WorkspaceCreationRequest
     */
    'appId': string;
    /**
     * The user identification, usually the email address.
     * @type {string}
     * @memberof WorkspaceCreationRequest
     */
    'user': string;
    /**
     * The app this workspace will be used with.
     * @type {string}
     * @memberof WorkspaceCreationRequest
     */
    'appDefinition'?: string;
    /**
     * The label of the workspace
     * @type {string}
     * @memberof WorkspaceCreationRequest
     */
    'label'?: string;
}
/**
 * Request to delete a workspace
 * @export
 * @interface WorkspaceDeletionRequest
 */
export interface WorkspaceDeletionRequest {
    /**
     * The App Id of this Theia.cloud instance. Request without a matching Id will be denied.
     * @type {string}
     * @memberof WorkspaceDeletionRequest
     */
    'appId': string;
    /**
     * The user identification, usually the email address.
     * @type {string}
     * @memberof WorkspaceDeletionRequest
     */
    'user': string;
    /**
     * The name of the workspace to delete.
     * @type {string}
     * @memberof WorkspaceDeletionRequest
     */
    'workspaceName': string;
}
/**
 * Request to list workspaces of a user.
 * @export
 * @interface WorkspaceListRequest
 */
export interface WorkspaceListRequest {
    /**
     * The App Id of this Theia.cloud instance. Request without a matching Id will be denied.
     * @type {string}
     * @memberof WorkspaceListRequest
     */
    'appId': string;
    /**
     * The user identification, usually the email address.
     * @type {string}
     * @memberof WorkspaceListRequest
     */
    'user': string;
}
/**
 * RootResourceApi - axios parameter creator
 * @export
 */
export declare const RootResourceApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Replies if the service is available.
     * @summary Ping
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceAppIdGet: (appId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Launches a session and creates a workspace if required. Responds with the URL of the launched session.
     * @summary Launch Session
     * @param {LaunchRequest} [launchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicePost: (launchRequest?: LaunchRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RootResourceApi - functional programming interface
 * @export
 */
export declare const RootResourceApiFp: (configuration?: Configuration) => {
    /**
     * Replies if the service is available.
     * @summary Ping
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceAppIdGet(appId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     * Launches a session and creates a workspace if required. Responds with the URL of the launched session.
     * @summary Launch Session
     * @param {LaunchRequest} [launchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicePost(launchRequest?: LaunchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * RootResourceApi - factory interface
 * @export
 */
export declare const RootResourceApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Replies if the service is available.
     * @summary Ping
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceAppIdGet(appId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Launches a session and creates a workspace if required. Responds with the URL of the launched session.
     * @summary Launch Session
     * @param {LaunchRequest} [launchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicePost(launchRequest?: LaunchRequest, options?: any): AxiosPromise<string>;
};
/**
 * RootResourceApi - object-oriented interface
 * @export
 * @class RootResourceApi
 * @extends {BaseAPI}
 */
export declare class RootResourceApi extends BaseAPI {
    /**
     * Replies if the service is available.
     * @summary Ping
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootResourceApi
     */
    serviceAppIdGet(appId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any>>;
    /**
     * Launches a session and creates a workspace if required. Responds with the URL of the launched session.
     * @summary Launch Session
     * @param {LaunchRequest} [launchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootResourceApi
     */
    servicePost(launchRequest?: LaunchRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
}
/**
 * SessionResourceApi - axios parameter creator
 * @export
 */
export declare const SessionResourceApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List sessions of a user.
     * @summary List sessions
     * @param {string} appId
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceSessionAppIdUserGet: (appId: string, user: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Stops a session.
     * @summary Stop session
     * @param {SessionStopRequest} [sessionStopRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceSessionDelete: (sessionStopRequest?: SessionStopRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the last activity timestamp for a session to monitor activity.
     * @summary Report session activity
     * @param {SessionActivityRequest} [sessionActivityRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceSessionPatch: (sessionActivityRequest?: SessionActivityRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Starts a new session for an existing workspace and responds with the URL of the started session.
     * @summary Start a new session
     * @param {SessionStartRequest} [sessionStartRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceSessionPost: (sessionStartRequest?: SessionStartRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SessionResourceApi - functional programming interface
 * @export
 */
export declare const SessionResourceApiFp: (configuration?: Configuration) => {
    /**
     * List sessions of a user.
     * @summary List sessions
     * @param {string} appId
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceSessionAppIdUserGet(appId: string, user: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SessionSpec>>>;
    /**
     * Stops a session.
     * @summary Stop session
     * @param {SessionStopRequest} [sessionStopRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceSessionDelete(sessionStopRequest?: SessionStopRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     * Updates the last activity timestamp for a session to monitor activity.
     * @summary Report session activity
     * @param {SessionActivityRequest} [sessionActivityRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceSessionPatch(sessionActivityRequest?: SessionActivityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     * Starts a new session for an existing workspace and responds with the URL of the started session.
     * @summary Start a new session
     * @param {SessionStartRequest} [sessionStartRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceSessionPost(sessionStartRequest?: SessionStartRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * SessionResourceApi - factory interface
 * @export
 */
export declare const SessionResourceApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List sessions of a user.
     * @summary List sessions
     * @param {string} appId
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceSessionAppIdUserGet(appId: string, user: string, options?: any): AxiosPromise<Array<SessionSpec>>;
    /**
     * Stops a session.
     * @summary Stop session
     * @param {SessionStopRequest} [sessionStopRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceSessionDelete(sessionStopRequest?: SessionStopRequest, options?: any): AxiosPromise<boolean>;
    /**
     * Updates the last activity timestamp for a session to monitor activity.
     * @summary Report session activity
     * @param {SessionActivityRequest} [sessionActivityRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceSessionPatch(sessionActivityRequest?: SessionActivityRequest, options?: any): AxiosPromise<boolean>;
    /**
     * Starts a new session for an existing workspace and responds with the URL of the started session.
     * @summary Start a new session
     * @param {SessionStartRequest} [sessionStartRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceSessionPost(sessionStartRequest?: SessionStartRequest, options?: any): AxiosPromise<string>;
};
/**
 * SessionResourceApi - object-oriented interface
 * @export
 * @class SessionResourceApi
 * @extends {BaseAPI}
 */
export declare class SessionResourceApi extends BaseAPI {
    /**
     * List sessions of a user.
     * @summary List sessions
     * @param {string} appId
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionResourceApi
     */
    serviceSessionAppIdUserGet(appId: string, user: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SessionSpec[], any>>;
    /**
     * Stops a session.
     * @summary Stop session
     * @param {SessionStopRequest} [sessionStopRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionResourceApi
     */
    serviceSessionDelete(sessionStopRequest?: SessionStopRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any>>;
    /**
     * Updates the last activity timestamp for a session to monitor activity.
     * @summary Report session activity
     * @param {SessionActivityRequest} [sessionActivityRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionResourceApi
     */
    serviceSessionPatch(sessionActivityRequest?: SessionActivityRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any>>;
    /**
     * Starts a new session for an existing workspace and responds with the URL of the started session.
     * @summary Start a new session
     * @param {SessionStartRequest} [sessionStartRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionResourceApi
     */
    serviceSessionPost(sessionStartRequest?: SessionStartRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
}
/**
 * WorkspaceResourceApi - axios parameter creator
 * @export
 */
export declare const WorkspaceResourceApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Lists the workspaces of a user.
     * @summary List workspaces
     * @param {string} appId
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceWorkspaceAppIdUserGet: (appId: string, user: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes a workspace.
     * @summary Delete workspace
     * @param {WorkspaceDeletionRequest} [workspaceDeletionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceWorkspaceDelete: (workspaceDeletionRequest?: WorkspaceDeletionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a new workspace for a user.
     * @summary Create workspace
     * @param {WorkspaceCreationRequest} [workspaceCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceWorkspacePost: (workspaceCreationRequest?: WorkspaceCreationRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkspaceResourceApi - functional programming interface
 * @export
 */
export declare const WorkspaceResourceApiFp: (configuration?: Configuration) => {
    /**
     * Lists the workspaces of a user.
     * @summary List workspaces
     * @param {string} appId
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceWorkspaceAppIdUserGet(appId: string, user: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserWorkspace>>>;
    /**
     * Deletes a workspace.
     * @summary Delete workspace
     * @param {WorkspaceDeletionRequest} [workspaceDeletionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceWorkspaceDelete(workspaceDeletionRequest?: WorkspaceDeletionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     * Creates a new workspace for a user.
     * @summary Create workspace
     * @param {WorkspaceCreationRequest} [workspaceCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceWorkspacePost(workspaceCreationRequest?: WorkspaceCreationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWorkspace>>;
};
/**
 * WorkspaceResourceApi - factory interface
 * @export
 */
export declare const WorkspaceResourceApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Lists the workspaces of a user.
     * @summary List workspaces
     * @param {string} appId
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceWorkspaceAppIdUserGet(appId: string, user: string, options?: any): AxiosPromise<Array<UserWorkspace>>;
    /**
     * Deletes a workspace.
     * @summary Delete workspace
     * @param {WorkspaceDeletionRequest} [workspaceDeletionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceWorkspaceDelete(workspaceDeletionRequest?: WorkspaceDeletionRequest, options?: any): AxiosPromise<boolean>;
    /**
     * Creates a new workspace for a user.
     * @summary Create workspace
     * @param {WorkspaceCreationRequest} [workspaceCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    serviceWorkspacePost(workspaceCreationRequest?: WorkspaceCreationRequest, options?: any): AxiosPromise<UserWorkspace>;
};
/**
 * WorkspaceResourceApi - object-oriented interface
 * @export
 * @class WorkspaceResourceApi
 * @extends {BaseAPI}
 */
export declare class WorkspaceResourceApi extends BaseAPI {
    /**
     * Lists the workspaces of a user.
     * @summary List workspaces
     * @param {string} appId
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceResourceApi
     */
    serviceWorkspaceAppIdUserGet(appId: string, user: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserWorkspace[], any>>;
    /**
     * Deletes a workspace.
     * @summary Delete workspace
     * @param {WorkspaceDeletionRequest} [workspaceDeletionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceResourceApi
     */
    serviceWorkspaceDelete(workspaceDeletionRequest?: WorkspaceDeletionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any>>;
    /**
     * Creates a new workspace for a user.
     * @summary Create workspace
     * @param {WorkspaceCreationRequest} [workspaceCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceResourceApi
     */
    serviceWorkspacePost(workspaceCreationRequest?: WorkspaceCreationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserWorkspace, any>>;
}
//# sourceMappingURL=api.d.ts.map