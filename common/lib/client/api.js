"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Theia.cloud API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.8.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceResourceApi = exports.WorkspaceResourceApiFactory = exports.WorkspaceResourceApiFp = exports.WorkspaceResourceApiAxiosParamCreator = exports.SessionResourceApi = exports.SessionResourceApiFactory = exports.SessionResourceApiFp = exports.SessionResourceApiAxiosParamCreator = exports.RootResourceApi = exports.RootResourceApiFactory = exports.RootResourceApiFp = exports.RootResourceApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * RootResourceApi - axios parameter creator
 * @export
 */
const RootResourceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Replies if the service is available.
         * @summary Ping
         * @param {string} appId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceAppIdGet: async (appId, options = {}) => {
            // verify required parameter 'appId' is not null or undefined
            (0, common_1.assertParamExists)('serviceAppIdGet', 'appId', appId);
            const localVarPath = `/service/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication SecurityScheme required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "SecurityScheme", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Launches a session and creates a workspace if required. Responds with the URL of the launched session.
         * @summary Launch Session
         * @param {LaunchRequest} [launchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicePost: async (launchRequest, options = {}) => {
            const localVarPath = `/service`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication SecurityScheme required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "SecurityScheme", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(launchRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.RootResourceApiAxiosParamCreator = RootResourceApiAxiosParamCreator;
/**
 * RootResourceApi - functional programming interface
 * @export
 */
const RootResourceApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.RootResourceApiAxiosParamCreator)(configuration);
    return {
        /**
         * Replies if the service is available.
         * @summary Ping
         * @param {string} appId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceAppIdGet(appId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceAppIdGet(appId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Launches a session and creates a workspace if required. Responds with the URL of the launched session.
         * @summary Launch Session
         * @param {LaunchRequest} [launchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicePost(launchRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicePost(launchRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.RootResourceApiFp = RootResourceApiFp;
/**
 * RootResourceApi - factory interface
 * @export
 */
const RootResourceApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.RootResourceApiFp)(configuration);
    return {
        /**
         * Replies if the service is available.
         * @summary Ping
         * @param {string} appId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceAppIdGet(appId, options) {
            return localVarFp.serviceAppIdGet(appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Launches a session and creates a workspace if required. Responds with the URL of the launched session.
         * @summary Launch Session
         * @param {LaunchRequest} [launchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicePost(launchRequest, options) {
            return localVarFp.servicePost(launchRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.RootResourceApiFactory = RootResourceApiFactory;
/**
 * RootResourceApi - object-oriented interface
 * @export
 * @class RootResourceApi
 * @extends {BaseAPI}
 */
class RootResourceApi extends base_1.BaseAPI {
    /**
     * Replies if the service is available.
     * @summary Ping
     * @param {string} appId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootResourceApi
     */
    serviceAppIdGet(appId, options) {
        return (0, exports.RootResourceApiFp)(this.configuration).serviceAppIdGet(appId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Launches a session and creates a workspace if required. Responds with the URL of the launched session.
     * @summary Launch Session
     * @param {LaunchRequest} [launchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootResourceApi
     */
    servicePost(launchRequest, options) {
        return (0, exports.RootResourceApiFp)(this.configuration).servicePost(launchRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RootResourceApi = RootResourceApi;
/**
 * SessionResourceApi - axios parameter creator
 * @export
 */
const SessionResourceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * List sessions of a user.
         * @summary List sessions
         * @param {string} appId
         * @param {string} user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceSessionAppIdUserGet: async (appId, user, options = {}) => {
            // verify required parameter 'appId' is not null or undefined
            (0, common_1.assertParamExists)('serviceSessionAppIdUserGet', 'appId', appId);
            // verify required parameter 'user' is not null or undefined
            (0, common_1.assertParamExists)('serviceSessionAppIdUserGet', 'user', user);
            const localVarPath = `/service/session/{appId}/{user}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication SecurityScheme required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "SecurityScheme", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stops a session.
         * @summary Stop session
         * @param {SessionStopRequest} [sessionStopRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceSessionDelete: async (sessionStopRequest, options = {}) => {
            const localVarPath = `/service/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication SecurityScheme required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "SecurityScheme", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sessionStopRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the last activity timestamp for a session to monitor activity.
         * @summary Report session activity
         * @param {SessionActivityRequest} [sessionActivityRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceSessionPatch: async (sessionActivityRequest, options = {}) => {
            const localVarPath = `/service/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication SecurityScheme required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "SecurityScheme", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sessionActivityRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts a new session for an existing workspace and responds with the URL of the started session.
         * @summary Start a new session
         * @param {SessionStartRequest} [sessionStartRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceSessionPost: async (sessionStartRequest, options = {}) => {
            const localVarPath = `/service/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication SecurityScheme required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "SecurityScheme", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sessionStartRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SessionResourceApiAxiosParamCreator = SessionResourceApiAxiosParamCreator;
/**
 * SessionResourceApi - functional programming interface
 * @export
 */
const SessionResourceApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SessionResourceApiAxiosParamCreator)(configuration);
    return {
        /**
         * List sessions of a user.
         * @summary List sessions
         * @param {string} appId
         * @param {string} user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceSessionAppIdUserGet(appId, user, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceSessionAppIdUserGet(appId, user, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Stops a session.
         * @summary Stop session
         * @param {SessionStopRequest} [sessionStopRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceSessionDelete(sessionStopRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceSessionDelete(sessionStopRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Updates the last activity timestamp for a session to monitor activity.
         * @summary Report session activity
         * @param {SessionActivityRequest} [sessionActivityRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceSessionPatch(sessionActivityRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceSessionPatch(sessionActivityRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Starts a new session for an existing workspace and responds with the URL of the started session.
         * @summary Start a new session
         * @param {SessionStartRequest} [sessionStartRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceSessionPost(sessionStartRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceSessionPost(sessionStartRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.SessionResourceApiFp = SessionResourceApiFp;
/**
 * SessionResourceApi - factory interface
 * @export
 */
const SessionResourceApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SessionResourceApiFp)(configuration);
    return {
        /**
         * List sessions of a user.
         * @summary List sessions
         * @param {string} appId
         * @param {string} user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceSessionAppIdUserGet(appId, user, options) {
            return localVarFp.serviceSessionAppIdUserGet(appId, user, options).then((request) => request(axios, basePath));
        },
        /**
         * Stops a session.
         * @summary Stop session
         * @param {SessionStopRequest} [sessionStopRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceSessionDelete(sessionStopRequest, options) {
            return localVarFp.serviceSessionDelete(sessionStopRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the last activity timestamp for a session to monitor activity.
         * @summary Report session activity
         * @param {SessionActivityRequest} [sessionActivityRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceSessionPatch(sessionActivityRequest, options) {
            return localVarFp.serviceSessionPatch(sessionActivityRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts a new session for an existing workspace and responds with the URL of the started session.
         * @summary Start a new session
         * @param {SessionStartRequest} [sessionStartRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceSessionPost(sessionStartRequest, options) {
            return localVarFp.serviceSessionPost(sessionStartRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SessionResourceApiFactory = SessionResourceApiFactory;
/**
 * SessionResourceApi - object-oriented interface
 * @export
 * @class SessionResourceApi
 * @extends {BaseAPI}
 */
class SessionResourceApi extends base_1.BaseAPI {
    /**
     * List sessions of a user.
     * @summary List sessions
     * @param {string} appId
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionResourceApi
     */
    serviceSessionAppIdUserGet(appId, user, options) {
        return (0, exports.SessionResourceApiFp)(this.configuration).serviceSessionAppIdUserGet(appId, user, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Stops a session.
     * @summary Stop session
     * @param {SessionStopRequest} [sessionStopRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionResourceApi
     */
    serviceSessionDelete(sessionStopRequest, options) {
        return (0, exports.SessionResourceApiFp)(this.configuration).serviceSessionDelete(sessionStopRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the last activity timestamp for a session to monitor activity.
     * @summary Report session activity
     * @param {SessionActivityRequest} [sessionActivityRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionResourceApi
     */
    serviceSessionPatch(sessionActivityRequest, options) {
        return (0, exports.SessionResourceApiFp)(this.configuration).serviceSessionPatch(sessionActivityRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Starts a new session for an existing workspace and responds with the URL of the started session.
     * @summary Start a new session
     * @param {SessionStartRequest} [sessionStartRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionResourceApi
     */
    serviceSessionPost(sessionStartRequest, options) {
        return (0, exports.SessionResourceApiFp)(this.configuration).serviceSessionPost(sessionStartRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SessionResourceApi = SessionResourceApi;
/**
 * WorkspaceResourceApi - axios parameter creator
 * @export
 */
const WorkspaceResourceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Lists the workspaces of a user.
         * @summary List workspaces
         * @param {string} appId
         * @param {string} user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceWorkspaceAppIdUserGet: async (appId, user, options = {}) => {
            // verify required parameter 'appId' is not null or undefined
            (0, common_1.assertParamExists)('serviceWorkspaceAppIdUserGet', 'appId', appId);
            // verify required parameter 'user' is not null or undefined
            (0, common_1.assertParamExists)('serviceWorkspaceAppIdUserGet', 'user', user);
            const localVarPath = `/service/workspace/{appId}/{user}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication SecurityScheme required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "SecurityScheme", [], configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a workspace.
         * @summary Delete workspace
         * @param {WorkspaceDeletionRequest} [workspaceDeletionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceWorkspaceDelete: async (workspaceDeletionRequest, options = {}) => {
            const localVarPath = `/service/workspace`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication SecurityScheme required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "SecurityScheme", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(workspaceDeletionRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new workspace for a user.
         * @summary Create workspace
         * @param {WorkspaceCreationRequest} [workspaceCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceWorkspacePost: async (workspaceCreationRequest, options = {}) => {
            const localVarPath = `/service/workspace`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication SecurityScheme required
            // oauth required
            await (0, common_1.setOAuthToObject)(localVarHeaderParameter, "SecurityScheme", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(workspaceCreationRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.WorkspaceResourceApiAxiosParamCreator = WorkspaceResourceApiAxiosParamCreator;
/**
 * WorkspaceResourceApi - functional programming interface
 * @export
 */
const WorkspaceResourceApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.WorkspaceResourceApiAxiosParamCreator)(configuration);
    return {
        /**
         * Lists the workspaces of a user.
         * @summary List workspaces
         * @param {string} appId
         * @param {string} user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceWorkspaceAppIdUserGet(appId, user, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceWorkspaceAppIdUserGet(appId, user, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Deletes a workspace.
         * @summary Delete workspace
         * @param {WorkspaceDeletionRequest} [workspaceDeletionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceWorkspaceDelete(workspaceDeletionRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceWorkspaceDelete(workspaceDeletionRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Creates a new workspace for a user.
         * @summary Create workspace
         * @param {WorkspaceCreationRequest} [workspaceCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceWorkspacePost(workspaceCreationRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceWorkspacePost(workspaceCreationRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.WorkspaceResourceApiFp = WorkspaceResourceApiFp;
/**
 * WorkspaceResourceApi - factory interface
 * @export
 */
const WorkspaceResourceApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.WorkspaceResourceApiFp)(configuration);
    return {
        /**
         * Lists the workspaces of a user.
         * @summary List workspaces
         * @param {string} appId
         * @param {string} user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceWorkspaceAppIdUserGet(appId, user, options) {
            return localVarFp.serviceWorkspaceAppIdUserGet(appId, user, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a workspace.
         * @summary Delete workspace
         * @param {WorkspaceDeletionRequest} [workspaceDeletionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceWorkspaceDelete(workspaceDeletionRequest, options) {
            return localVarFp.serviceWorkspaceDelete(workspaceDeletionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new workspace for a user.
         * @summary Create workspace
         * @param {WorkspaceCreationRequest} [workspaceCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceWorkspacePost(workspaceCreationRequest, options) {
            return localVarFp.serviceWorkspacePost(workspaceCreationRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.WorkspaceResourceApiFactory = WorkspaceResourceApiFactory;
/**
 * WorkspaceResourceApi - object-oriented interface
 * @export
 * @class WorkspaceResourceApi
 * @extends {BaseAPI}
 */
class WorkspaceResourceApi extends base_1.BaseAPI {
    /**
     * Lists the workspaces of a user.
     * @summary List workspaces
     * @param {string} appId
     * @param {string} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceResourceApi
     */
    serviceWorkspaceAppIdUserGet(appId, user, options) {
        return (0, exports.WorkspaceResourceApiFp)(this.configuration).serviceWorkspaceAppIdUserGet(appId, user, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a workspace.
     * @summary Delete workspace
     * @param {WorkspaceDeletionRequest} [workspaceDeletionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceResourceApi
     */
    serviceWorkspaceDelete(workspaceDeletionRequest, options) {
        return (0, exports.WorkspaceResourceApiFp)(this.configuration).serviceWorkspaceDelete(workspaceDeletionRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new workspace for a user.
     * @summary Create workspace
     * @param {WorkspaceCreationRequest} [workspaceCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceResourceApi
     */
    serviceWorkspacePost(workspaceCreationRequest, options) {
        return (0, exports.WorkspaceResourceApiFp)(this.configuration).serviceWorkspacePost(workspaceCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.WorkspaceResourceApi = WorkspaceResourceApi;
//# sourceMappingURL=api.js.map